// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MyToken is ERC20, Ownable {

    event TokensMinted(address indexed receiver, uint256 amountSent);
    event TokensBurnt(address indexed from, uint256 amountDeducted);
    event TokensTransferred(address indexed sender, address indexed recipient, uint256 amountSent);

    constructor(address initialOwner) ERC20("MyToken", "MCT") Ownable(initialOwner) {
        _mint(initialOwner, 0); 
    }

    function mintTokens(address receiver, uint256 amountSent) external onlyOwner {
        _mint(receiver, amountSent);
        emit TokensMinted(receiver, amountSent);
    }

    function burnTokens(uint256 amountDeducted) external {
        _burn(_msgSender(), amountDeducted);
        emit TokensBurnt(_msgSender(), amountDeducted);
    }
  
    function transferTokens(address recipient, uint256 amountSent) public returns (bool) {
        _transfer(_msgSender(), recipient, amountSent);
        emit TokensTransferred(_msgSender(), recipient, amountSent);
        return true;
    }
}
